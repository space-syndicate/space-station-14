using System.Linq;
using Content.Corvax.Interfaces.Shared;
using Content.Shared.Corvax.TTS;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Prototypes;
using Content.Client.Stylesheets;
using Content.Shared.Humanoid;
using System.Text.RegularExpressions;

namespace Content.Client.Corvax.TTS;

[GenerateTypedNameReferences]
public sealed partial class TTSTab : Control
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public event Action<string>? OnVoiceSelected;
    public event Action<string>? OnPreviewRequested;

    private List<TTSVoicePrototype> _allVoices = new();
    private List<TTSVoicePrototype> _filteredVoices = new();
    private Dictionary<string, List<TTSVoicePrototype>> _categorizedVoices = new();
    private string? _selectedVoiceId;

    private static readonly Regex CategoryRegex = new Regex(@"^(.*?)\s*\(([^)]+)\)\s*$", RegexOptions.Compiled);

    public TTSTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        LoadVoices();
        SearchEdit.OnTextChanged += OnSearchChanged;
    }

    private void LoadVoices()
    {
        foreach (var voice in _allVoices)
        {
            var name = Loc.GetString(voice.Name);
            var category = Loc.GetString("humanoid-profile-editor-voice-other");

            var match = CategoryRegex.Match(name);
            if (match.Success)
            {
                category = match.Groups[2].Value.Trim();
            }

            if (!_categorizedVoices.ContainsKey(category))
                _categorizedVoices[category] = new List<TTSVoicePrototype>();

            _categorizedVoices[category].Add(voice);
        }

        CategoriesContainer.RemoveAllChildren();

        foreach (var category in _categorizedVoices.Keys.OrderBy(k => k))
        {
            var button = new Button
            {
                Text = category,
                ToolTip = Loc.GetString("humanoid-profile-editor-voice-category-tooltip", ("category", category)),
                HorizontalExpand = true,
            };

            button.OnPressed += _ =>
            {
                SearchEdit.Text = category;
                UpdateResults();
            };

            CategoriesContainer.AddChild(button);
        }

        UpdateResults();
    }

    private void OnSearchChanged(LineEdit.LineEditEventArgs args)
    {
        UpdateResults();
    }

    private void UpdateResults()
    {
        VoicesGrid.RemoveAllChildren();
        _filteredVoices.Clear();

        var searchText = SearchEdit.Text.ToLowerInvariant();

        foreach (var voice in _allVoices)
        {
            var name = Loc.GetString(voice.Name).ToLowerInvariant();

            if (string.IsNullOrEmpty(searchText) ||
                name.Contains(searchText) ||
                voice.ID.ToLowerInvariant().Contains(searchText))
            {
                _filteredVoices.Add(voice);
            }
        }

        foreach (var voice in _filteredVoices)
        {
            var displayName = Loc.GetString(voice.Name);
            var canSelectVoice = CanUseVoice(voice);

            var voiceContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Center
            };

            var selectButton = new Button
            {
                Text = displayName,
                ToolTip = canSelectVoice ? voice.ID : Loc.GetString("humanoid-profile-editor-voice-tooltip-sponsoronly"),
                HorizontalExpand = true,
                Disabled = !canSelectVoice,
                StyleClasses = { StyleNano.ButtonOpenRight }
            };

            if (voice.ID == _selectedVoiceId)
            {
                selectButton.AddStyleClass(StyleBase.ButtonCaution);
            }

            selectButton.OnPressed += _ =>
            {
                if (canSelectVoice)
                {
                    OnVoiceSelected?.Invoke(voice.ID);
                }
            };

            var previewButton = new Button
            {
                Text = Loc.GetString("humanoid-profile-editor-voice-play"),
                MinWidth = 30,
                ToolTip = Loc.GetString("humanoid-profile-editor-voice-tooltip-play"),
                StyleClasses = { StyleNano.ButtonOpenLeft }
            };

            previewButton.OnPressed += _ =>
            {
                OnPreviewRequested?.Invoke(voice.ID);
            };

            voiceContainer.AddChild(selectButton);
            voiceContainer.AddChild(previewButton);

            VoicesGrid.AddChild(voiceContainer);
        }

        ResultsLabel.Text = Loc.GetString("humanoid-profile-editor-voice-match",
            ("filtered", _filteredVoices.Count), ("all", _allVoices.Count));
    }

    private bool CanUseVoice(TTSVoicePrototype voice)
    {
        if (!voice.SponsorOnly)
            return true;

        var sponsorsManager = IoCManager.Resolve<ISharedSponsorsManager>();
        return sponsorsManager?.GetClientPrototypes().Contains(voice.ID) == true;
    }

    public void UpdateControls(HumanoidCharacterProfile? profile, Sex sex)
    {
        if (profile == null)
            return;

        _selectedVoiceId = profile.Voice;

        _allVoices = _prototypeManager
            .EnumeratePrototypes<TTSVoicePrototype>()
            .Where(o => o.RoundStart && HumanoidCharacterProfile.CanHaveVoice(o, sex))
            .OrderBy(o => Loc.GetString(o.Name))
            .ToList();

        _categorizedVoices.Clear();
        LoadVoices();
    }

    public void SetSelectedVoice(string voiceId)
    {
        _selectedVoiceId = voiceId;
        UpdateResults();
    }
}
