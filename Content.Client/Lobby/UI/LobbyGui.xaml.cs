using Content.Client.Message;
using Content.Client.UserInterface.Systems.EscapeMenu;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
// Corvax-Donate-Start
using Content.Client.Corvax.Donate;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Configuration;
using Content.Shared.Corvax.CCCVars;
// Corvax-Donate-End

namespace Content.Client.Lobby.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class LobbyGui : UIScreen
    {
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;

        // Corvax-Donate-Start
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        private DonateWindow? _donateWindow;
        // Corvax-Donate-End



        public LobbyGui()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            SetAnchorPreset(MainContainer, LayoutPreset.Wide);
            SetAnchorPreset(Background, LayoutPreset.Wide);

            LobbySong.SetMarkup(Loc.GetString("lobby-state-song-no-song-text"));

            LeaveButton.OnPressed += _ => _consoleHost.ExecuteCommand("disconnect");
            OptionsButton.OnPressed += _ => UserInterfaceManager.GetUIController<OptionsUIController>().ToggleWindow();

            CollapseButton.OnPressed += _ => TogglePanel(false);
            ExpandButton.OnPressed += _ => TogglePanel(true);


            // Corvax-Donate-Start
            _cfg.OnValueChanged(CCCVars.LobbyDonateWindowEnabled, OnDonateWindowEnabledChanged, true);
            // Corvax-Donate-End
        }

        public void SwitchState(LobbyGuiState state)
        {
            DefaultState.Visible = false;
            CharacterSetupState.Visible = false;

            switch (state)
            {
                case LobbyGuiState.Default:
                    DefaultState.Visible = true;
                    RightSide.Visible = true;
                    break;
                case LobbyGuiState.CharacterSetup:
                    CharacterSetupState.Visible = true;

                    var actualWidth = (float)UserInterfaceManager.RootControl.PixelWidth;
                    var setupWidth = (float)LeftSide.PixelWidth;

                    if (1 - (setupWidth / actualWidth) > 0.30)
                    {
                        RightSide.Visible = false;
                    }

                    UserInterfaceManager.GetUIController<LobbyUIController>().ReloadCharacterSetup();

                    break;
            }
        }

        private void TogglePanel(bool value)
        {
            RightSide.Visible = value;
            ExpandPanel.Visible = !value;
        }

        public enum LobbyGuiState : byte
        {
            /// <summary>
            ///  The default state, i.e., what's seen on launch.
            /// </summary>
            Default,
            /// <summary>
            ///  The character setup state.
            /// </summary>
            CharacterSetup
        }

        // Corvax-Donate-Start
        private void OnDonateWindowEnabledChanged(bool enabled)
        {
            if (enabled)
            {
                if (_donateWindow == null)
                {
                    _donateWindow = new DonateWindow();
                    TopLeft.AddChild(_donateWindow);
                    _donateWindow.SetPositionInParent(1);
                }
            }
            else
            {
                _donateWindow?.Dispose();
                _donateWindow = null;
            }
        }
        // Corvax-Donate-End
    }
}
